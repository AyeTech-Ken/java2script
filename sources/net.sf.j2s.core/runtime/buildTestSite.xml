<project name="swingjs" default="createApps" basedir=".">
   			
<!-- buildTestSite.xml for distribution - for building a test site in a new SwingJS project / -->
	
	
  <target name="createApps" id="createApps">

  	<!-- set import.swingjs to false if swingjs project is not checked out or to not use swingjs/zip/swingjs.zip -->
  	
  	<property name="import.swingjs" value="false"/>

  	<property name="project.path" value="." />  	
  	<property name="site.path" value="site/swingjs" />
  	<property name="swingjs.path" value="../swingjs" />
  	<property name="closure.jar" value="tools/closure_compiler.jar" />

  		
  	
    <!-- <if> construct needs ant-contrib.jar -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="tools/ant-contrib.jar" />
      </classpath>
    </taskdef>

  	<!-- create a NON svn local directory only containing JS files  -->
  	
  	<echo>deleting site directory</echo>
   	<delete quiet="true" failonerror="false" dir="site" />
   	<mkdir dir="site/tmp" />
   	<mkdir dir="site/tmp/org" />
   	<mkdir dir="site/tmp/com" />
   	<mkdir dir="site/tmp/test" />
   	<mkdir dir="site/tmp/edu" />
  	
	<echo>adding SwingJS project files</echo>
  	<if><equals arg1="${import.swingjs}" arg2="true" /><then>
  		<echo>...getting ${swingjs.path}/zip/swingjs_core_site.zip</echo>
	  	<copy file="${swingjs.path}/zip/swingjs_core_site.zip" todir="zip" />
  	</then><else>
  		<echo>...using zip/swingjs_core_site.zip</echo>
    </else>
  	</if>
  	<unzip src="zip/swingjs_core_site.zip" dest="site" />
  	
  	<echo>replacing SwingJS.min.js with SwingJS.full.js</echo>
		<copy failonerror="false" file="${site.path}/SwingJS.min.js"
		tofile="${site.path}/js/SwingJS.min.js" />
  		<copy file="${site.path}/js/SwingJS.full.js"
  		tofile="${site.path}/SwingJS.min.js" />

  	<echo>adding dev files for use without core files</echo>
   	<copy todir="site/swingjs" failonerror="false" overwrite="true" >
  	  <fileset dir="dev">
  	    <include name="**/*" />
  	  </fileset>
    </copy>
  	<replace dir="site/swingjs/j2s/core" includes="package.js" token="(J2S._debugCode)" value="(true)"/>


<!--  	working here -->

   	<echo>...adding html files</echo>
   	<copy todir="site/swingjs/examples" failonerror="false" overwrite="true" >
  	  <fileset dir="html">
  	    <include name="**/*" />
  	  </fileset>
    </copy>

  	<echo>...fixing Proxy calls (should allow test for this)</echo>
  	<replaceregexp match="(\w)Proxy\.(\w+) \(" replace="\1Proxy.$invokeMethod('\2'," flags="g" byline="true" >
        <fileset dir="bin">
          <include name="**/*.js" />
        </fileset>
    </replaceregexp>

  	<echo>...removing initialization code blocks {...} in decorateAsClass calls</echo>
  	<replaceregexp match="(Clazz\.decorateAsClass \(function \(\) \{[^{}]*)(\n\{[^{]*\})([^{]*\})" replace="\1\3" flags="g" byline="false" >
        <fileset dir="bin">
          <include name="**/*.js" />
        </fileset>
    </replaceregexp>
  	
   	<echo>...fixing "jsjava" references</echo>
  	<replace dir="bin" includes="**/*.js" token="jsjava" value="java" />
  	<replace dir="bin" includes="**/*.js" token="javajs.util" value="JU" />
  		
  	<!-- modify class names -->		

    <echo>...removing j2s globals Class and JavaObject</echo>
    <echo>...replacing Class.forName with Clazz._4Name</echo>
  	<replace dir="bin" includes="**/*.js" token="Class.forName" value="Clazz._4Name"/>
    <echo>...replacing JavaObject with Clazz._O</echo>
  	<replace dir="bin" includes="**/*.js" token=" JavaObject" value=" Clazz._O"/>
    <echo>...removing all $fz references for sub/superclass common private function names</echo>
  	<replace dir="bin" includes="**/*.js" token="($fz =" value=""/>
  	<replace dir="bin" includes="**/*.js" token=", $fz.isPrivate = true, $fz)" value=""/>
   	   	

    <echo>...abbreviating class name "javajs.util", and "com.jcraft.jzlib" to "JU"</echo>
  	<replace dir="bin" includes="**/*.js" token="javajs.util" value="JU"/>
  	<replace dir="bin" includes="**/*.js" token="com.jcraft.jzlib" value="JU"/>
   	  	   	  	
   	<echo>...fixing J2S compiler errors</echo>
    <echo>...replacing "new Boolean" with "Boolean.from" in com, org, and test</echo>
  	<replace dir="bin" includes="**/*.js" token="new Boolean" value="Boolean.from"/>

	<!-- this will be important when the time comes that classes are combined into a single .z file. -->		
  	<echo>...changing "^c$ = " to "var c$ ="</echo>
      	<replaceregexp match='^c\$\s*=' replace='var c$=' flags="gm" >
        <fileset dir="bin">
          <include name="**/*.js" />
        </fileset>
    </replaceregexp>
	<echo>...changing Clazz.pu$h() to Clazz.pu$h(c$)</echo>
  	<replace dir="bin" includes="**/*.js" token="pu$h(self.c$)" value="pu$h(c$)"/>
  	<replace dir="bin" includes="**/*.js" token="Clazz.pu$h()" value="Clazz.pu$h(c$)"/>
  	<replace dir="bin" includes="**/*.js" token="Clazz.pu$h ()" value="Clazz.pu$h(c$)"/>

  	
  	
  		<echo>...copying all bin/*.js to j2s</echo>
  	<copy todir="site/tmp"  overwrite="true" >
      <fileset dir="bin">
        <include name="**/*.js" />
      </fileset>
    </copy>
   	
  	<echo>...adding to swingjs/j2s non-java files from src (for CalendarData, swingjs.jquery)</echo>
  	<copy todir="site/swingjs/j2s"  overwrite="true" >
      <fileset dir="src">
        <include name="**/*" />
        <exclude name="**/*.java" />
      </fileset>
    </copy>
   	
   	
  	<copy todir="site/swingjs/j2s"  overwrite="true" >
      <fileset dir="site/tmp">
        <include name="**/*.js" />
      </fileset>
    </copy>

  	<echo>deleting site/tmp directory</echo>
   	 	<delete quiet="true" dir="site/tmp" />

  	<echo>Compiling is complete. use site/examples/testApp.xml for Java Applications; site/examples/testApplet.xml for Java Applets; </echo>


  </target>
	
  </project>
