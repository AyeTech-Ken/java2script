Clazz.declareInterface (java.io,"Closeable");
Clazz.declareInterface (java.io,"DataInput");
Clazz.declareInterface (java.io,"DataOutput");
Clazz.declareInterface (java.io,"Externalizable");
Clazz.declareInterface (java.io,"Flushable");
Clazz.declareInterface (java.io,"Serializable");
Clazz.declareInterface (java.lang,"Appendable");
Clazz.declareInterface (java.lang,"CharSequence");
Clazz.declareInterface (java.lang,"Cloneable");
Clazz.declareInterface (java.lang,"Comparable");
Clazz.declareInterface (java.lang,"Iterable");
Clazz.declareInterface (java.lang,"Runnable");
Clazz.declareInterface (java.util,"Comparator");
Clazz.declareInterface(java.lang.reflect,"AnnotatedElement");
Clazz.declareInterface(java.lang.reflect,"InvocationHandler");
Clazz.declareInterface(javautil,"Collection",Iterable);
Clazz.declareInterface(javautil,"Enumeration");
Clazz.declareInterface(javautil,"EventListener");
Clazz.declareInterface(javautil,"Iterator");
Clazz.declareInterface(javautil,"List",javautil.Collection);
Clazz.declareInterface(javautil,"ListIterator",javautil.Iterator);
Clazz.declareInterface(javautil,"Map");
Clazz.declareInterface(javautil,"Queue",javautil.Collection);
Clazz.declareInterface(javautil,"RandomAccess");
Clazz.declareInterface(javautil,"Set",javautil.Collection);
Clazz.declareInterface(javautil.Map,"Entry");

Clazz.decorateAsClass (function (){Clazz.instantialize(this, arguments);return Clazz._Error();}, java.lang, "Error", Throwable);
 
Clazz.defineMethod(Boolean,"booleanValue",
Clazz.defineMethod(Byte,"parseByte",
Clazz.defineMethod(Byte,"parseByteRadix",
Clazz.defineMethod(c$,"charValue",
Clazz.defineMethod(c$,"fillInStackTrace",
Clazz.defineMethod(c$,"getCause",
Clazz.defineMethod(c$,"getClassName",
Clazz.defineMethod(c$,"getClassName",
Clazz.defineMethod(c$,"getDefaultValue",
Clazz.defineMethod(c$,"getException",
Clazz.defineMethod(c$,"getException",
Clazz.defineMethod(c$,"getExceptionTypes",
Clazz.defineMethod(c$,"getExceptionTypes",
Clazz.defineMethod(c$,"getFileName",
Clazz.defineMethod(c$,"getGenericExceptionTypes",
Clazz.defineMethod(c$,"getGenericExceptionTypes",
Clazz.defineMethod(c$,"getGenericParameterTypes",
Clazz.defineMethod(c$,"getGenericParameterTypes",
Clazz.defineMethod(c$,"getGenericReturnType",
Clazz.defineMethod(c$,"getGenericType",
Clazz.defineMethod(c$,"getKey",
Clazz.defineMethod(c$,"getLineNumber",
Clazz.defineMethod(c$,"getListener",
Clazz.defineMethod(c$,"getLocalizedMessage",
Clazz.defineMethod(c$,"getMessage",
Clazz.defineMethod(c$,"getMessage",
Clazz.defineMethod(c$,"getMessage",
Clazz.defineMethod(c$,"getMethodName",
Clazz.defineMethod(c$,"getParameterAnnotations",
Clazz.defineMethod(c$,"getParameterAnnotations",
Clazz.defineMethod(c$,"getParameterTypes",
Clazz.defineMethod(c$,"getParameterTypes",
Clazz.defineMethod(c$,"getReturnType",
Clazz.defineMethod(c$,"getSource",
Clazz.defineMethod(c$,"getStackTrace",
Clazz.defineMethod(c$,"getTargetException",
Clazz.defineMethod(c$,"getType",
Clazz.defineMethod(c$,"getUndeclaredThrowable",
Clazz.defineMethod(c$,"initCause",
Clazz.defineMethod(c$,"invoke",
Clazz.defineMethod(c$,"invokeD",
Clazz.defineMethod(c$,"invokeF",
Clazz.defineMethod(c$,"invokeI",
Clazz.defineMethod(c$,"invokeJ",
Clazz.defineMethod(c$,"invokeL",
Clazz.defineMethod(c$,"invokeV",
Clazz.defineMethod(c$,"isAccessible",
Clazz.defineMethod(c$,"isBridge",
Clazz.defineMethod(c$,"isEnumConstant",
Clazz.defineMethod(c$,"isNativeMethod",
Clazz.defineMethod(c$,"isVarArgs",
Clazz.defineMethod(c$,"isVarArgs",
Clazz.defineMethod(c$,"newInstance",
Clazz.defineMethod(c$,"printStackTrace",
Clazz.defineMethod(c$,"printStackTrace",
Clazz.defineMethod(c$,"printStackTrace",
Clazz.defineMethod(c$,"setAccessible",
Clazz.defineMethod(c$,"setStackTrace",
Clazz.defineMethod(c$,"toGenericString",
Clazz.defineMethod(c$,"toGenericString",
Clazz.defineMethod(c$,"toGenericString",
Clazz.defineMethod(Double,"$valueOf",
Clazz.defineMethod(Double,"isInfinite",
Clazz.defineMethod(Double,"isNaN",
Clazz.defineMethod(Double,"parseDouble",
Clazz.defineMethod(Float,"isInfinite",
Clazz.defineMethod(Float,"isNaN",
Clazz.defineMethod(Float,"parseFloat",
Clazz.defineMethod(Integer,"bitCount",
Clazz.defineMethod(Integer,"numberOfLeadingZeros",
Clazz.defineMethod(Integer,"numberOfTrailingZeros",
Clazz.defineMethod(Integer,"parseInt",
Clazz.defineMethod(Integer,"parseIntRadix",
Clazz.defineMethod(javautil.Date,"after",
Clazz.defineMethod(javautil.Date,"before",
Clazz.defineMethod(javautil.Date,"clone",
Clazz.defineMethod(javautil.Date,"compareTo",
Clazz.defineMethod(javautil.Date,"compareTo",
Clazz.defineMethod(javautil.Date,"equals",
Clazz.defineMethod(Long,"parseLong",
Clazz.defineMethod(Number,"byteValue",
Clazz.defineMethod(Number,"doubleValue",
Clazz.defineMethod(Number,"floatValue",
Clazz.defineMethod(Number,"intValue",
Clazz.defineMethod(Number,"longValue",
Clazz.defineMethod(Number,"shortValue",
Clazz.defineMethod(Short, "parseShort",
Clazz.defineMethod(Short, "parseShortRadix",
Clazz.instantialize (this, arguments);
Clazz.instantialize(instance,a);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
Clazz.instantialize(this,arguments);
decorateAsType (Short, "Short", Number, Comparable, true);
decorateAsType(Byte,"Byte",Number,Comparable,true);
decorateAsType(Double,"Double",Number,Comparable,true);
decorateAsType(Float,"Float",Number,Comparable,true);
decorateAsType(Integer,"Integer",Number,Comparable,true);
decorateAsType(Long,"Long",Number,Comparable,true);
